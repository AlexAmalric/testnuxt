{
  "resolvedId": "/home/a/serious_game/albers/pages/albers/mint.vue?macro=true",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <div class=\"rounded-full bg-transparent p-2 transition-all flex justify-center items-center lg:mt-10 flex-col\">\n    <template v-if=\"xrplAddress\">\n      <!-- <pre>{{ userNFT }}</pre>\n      <pre>{{ ownsNFT }}</pre> -->\n      <div class=\"ml-2 md:text-2xl text-lg font-title text-gray-600 dark:text-gray-300 mb-4 text-center\">\n        <template v-if=\"NFTExists\">\n          <template v-if=\"!ownsNFT\">\n            <template v-if=\"NFTHasOffer\">\n              <div class=\"mb-4\">\n                Your NFT is ready!\n              </div>\n              <UButton @click=\"claimNft\" color=\"black\" size=\"xl\">\n                Claim your NFT\n              </UButton>\n            </template>\n            <template v-else>\n              Preparing your claim...\n            </template>\n          </template>\n\n          <template v-else>\n            <div class=\"ml-2 md:text-2xl text-lg font-title text-gray-600 dark:text-gray-300 mb-4\">\n              Congratulations!<br />\n\n              You've completed the quest!</div>\n            <div class=\"ml-2 md:text-xl text-lg font-title text-gray-600 dark:text-gray-300 mb-4\">\n              Share on X and come see us <br />\n              at our next <a href=\"https://www.xrpl-commons.org/training\" target=\"_blank\" class=\"white\">training</a> to\n              claim a prize\n            </div>\n            <ShareOnX />\n\n          </template>\n        </template>\n        <template v-else>One moment while we check on the status of your NFT...</template>\n      </div>\n\n      <NuxtLink :to=\"`/albers/${xrplAddress}`\">\n        <albers :xrplAddress=\"xrplAddress\" @loaded=\"onImageLoaded\" />\n      </NuxtLink>\n      <div class=\"text-center font-title text-xl\" v-if=\"userNFT && userNFT.rank\">Rank #{{ userNFT.rank }}</div>\n    </template>\n    <template v-else>\n      <div class=\"ml-2 md:text-2xl text-lg font-title text-gray-600 dark:text-gray-300 mb-4\">Connect your wallet to\n        continue...</div>\n      <UButton @click=\"connectWallet\" color=\"black\" size=\"xl\">\n        Connect Wallet\n      </UButton>\n    </template>\n\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted, inject } from \"vue\"\n/* @ts-ignore */\nimport { QRCodeModal } from '#components'\n/* @ts-ignore */\nimport API from '~/server/client'\nimport { useRoute } from 'vue-router'\n\n// flow:\n// check if wallet connected: xrplAddress?\n// -> connectWallet\n// check if user has an NFT: userNFT.uri?\n// =-> show Albers, wait for onImageLoaded to Mint and then CreateOffer in the background\n// => when available augment view with updated info from the userNFT\n// => display Claim button\n// => ClaimNFT flow\n// display Albers with info from userNFT\n\nconst { query } = useRoute()\n\nconst network: any = inject('network')\n/* @ts-ignore */\nconst modal = useModal()\n\n// wallet\nconst userToken = ref('')\nconst xrplAddress = ref('')\n// local image\nconst localURI = ref(null)\n// user NFT\nconst userNFT = ref(null) as any\n\n\n// general\nconst working = ref(false)\n\n\nonMounted(async () => {\n  userToken.value = localStorage.getItem('user_token') || ''\n  xrplAddress.value = localStorage.getItem('xrpl_address') || ''\n\n  if (query.id) {\n    const data: any = await API.XamanGetPayload({ uuid: query.uuid })\n    console.log(data)\n  }\n  if (!userToken.value || !xrplAddress.value) {\n    await connectWallet()\n  }\n})\n\n// triggers getOrMintNFT on xrplAddress change\nwatch(xrplAddress, async (newValue, oldValue) => {\n  console.log('triggered on xrplAddresss change', { newValue, oldValue })\n  if (newValue !== '') {\n    let nftInfo = await getNftInfo({ xrplAddress: xrplAddress.value })\n    userNFT.value = nftInfo\n  }\n})\n\nconst NFTExists = computed(() => userNFT.value?.nftId)\n\nconst NFTHasOffer = computed(() => userNFT.value?.nftOfferId)\n\nconst ownsNFT = computed(() => {\n  return (userNFT.value && userNFT.value.owner && userNFT.value.owner === xrplAddress.value)\n})\n\n// trigger on userNFT change\nwatch(() => localURI.value && userNFT.value, async (newValue: any, oldValue) => {\n  try {\n    console.log('watch userNFT', newValue)\n    if (!localURI.value) {\n      console.log('no image...')\n      return\n    }\n    console.log('watch userNFT image', localURI.value, await API.albersURLExists({ xrplAddress }))\n    if (!newValue) {\n      // need to mint\n      console.log('should mint...', { xrplAddress: xrplAddress.value })\n      const mintResult = await API.createNFT({ xrplAddress: xrplAddress.value, network: network.value })\n      console.log({ mintResult })\n      userNFT.value = await getNftInfo({ xrplAddress: xrplAddress.value })\n    } else if (!newValue.nftOfferId) {\n      // need to create offer\n      const createOfferResult = await API.createOffer({ xrplAddress: xrplAddress.value, network: network.value })\n      console.log({ createOfferResult })\n      userNFT.value = await getNftInfo({ xrplAddress: xrplAddress.value })\n    }\n  } catch (e) {\n    console.error('oups', e)\n  }\n})\n\nconst onImageLoaded = ({ url }: any) => {\n  console.log('onImageLoaded', { url })\n  localURI.value = url\n}\n\nasync function initializeWebSocket({ url, onMessage }: { url: string, onMessage?: any }) {\n  /* @ts-ignore */\n  const ws = new WebSocket(url);\n  /* @ts-ignore */\n  ws.onmessage = async (message) => {\n    let responseObj = JSON.parse(message.data)\n    console.log(responseObj)\n    const { signed, payload_uuidv4 } = responseObj\n\n    // only handle signed messages\n    if ((signed !== true) || !payload_uuidv4) {\n      return\n    }\n\n    // get payload from backend\n    const data: any = await API.XamanGetPayload({ uuid: payload_uuidv4 })\n    console.log({ data })\n\n    // check network\n    /* @ts-ignore */\n    if (data.response.environment_nodetype !== network.value) {\n      // regen qr code\n      alert(`Wrong network used: network should be: ${network.value} was ${data.response.environment_nodetype}. Use the lock icon to toggle networks.`);\n      await connectWallet()\n      return\n    }\n\n    await onMessage({\n      data,\n      wsClose: () => ws.close()\n    })\n  }\n\n  return ws\n}\n\nfunction connectWallet() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const payload = await API.XamanSignIn()\n\n      // from payload\n      const qrCodeSrc = payload.refs.qr_png\n      const mobileUrl = payload.next.always;\n      const websocket_status = payload.refs.websocket_status\n\n      // launch modal\n      console.log({ qrCodeSrc, mobileUrl })\n      modal.open(QRCodeModal, {\n        qrCodeSrc,\n        mobileUrl\n      })\n\n      const ws = await initializeWebSocket({\n        url: websocket_status,\n        onMessage: async ({ data, wsClose }: { data: any, wsClose: any }) => {\n          // only deal with Signin\n          if (data.payload.tx_type == 'SignIn') {\n            // save wallet data to localStorage\n            xrplAddress.value = data.response.account\n            userToken.value = data.application.issued_user_token\n            localStorage.setItem('xrpl_address', xrplAddress.value)\n            localStorage.setItem('user_token', userToken.value)\n            modal.close(QRCodeModal)\n            wsClose()\n            resolve(xrplAddress.value)\n          } else {\n            console.log('ignored message', data)\n          }\n        }\n      })\n\n    } catch (error) {\n      alert('Error connecting to Xumm: ' + error)\n      reject(error)\n    }\n  })\n  // todo add race condition with timeout?\n}\n\nconst getNftInfo = async ({ xrplAddress }) => {\n  const result = await API.getNFTs({ xrplAddress, network: network.value })\n  const nftInfo = result?.[0]\n  return nftInfo\n}\n\nasync function claimNft() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      working.value = true\n      const payload = await API.XamanGetAcceptNFTOffer({\n        userToken: userToken.value,\n        offerId: userNFT.value.nftOfferId\n      })\n\n      // from payload\n      console.log(payload)\n      const qrCodeSrc = payload.refs.qr_png\n      const mobileUrl = payload.next.always\n      const websocket_status = payload.refs.websocket_status\n\n      // launch modal\n      console.log({ qrCodeSrc, mobileUrl })\n      modal.open(QRCodeModal, {\n        qrCodeSrc,\n        mobileUrl\n      })\n\n      const ws = await initializeWebSocket({\n        url: websocket_status,\n        onMessage: async ({ data, wsClose }: { data: any, wsClose: any }) => {\n          // only deal with NFTAcceptOffer\n          if (data.payload.tx_type == 'NFTokenAcceptOffer') {\n            await redeemNft({ xrplAddress: xrplAddress.value });\n            modal.close(QRCodeModal)\n            resolve('something')\n            wsClose()\n          } else {\n            console.log('ignored message', data)\n          }\n        }\n      })\n\n    } catch (error) {\n      alert('Error connecting to Xumm: ' + error)\n      reject(error)\n    }\n  })\n}\n\nasync function redeemNft({ xrplAddress }) {\n  try {\n    await API.redeemNFT({ xrplAddress, network: network.value })\n    userNFT.value = await getNftInfo({ xrplAddress })\n  } catch (error) {\n    console.log(error)\n    alert(\"Error redeeming NFT\");\n  }\n}\n\n</script>\n\n<style scoped>\n.fixed {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n.backdrop-blur {\n  backdrop-filter: blur(5px);\n}\n\n.z-50 {\n  z-index: 50;\n}\n\n.min-h-screen {\n  min-height: 100vh;\n}\n\n.nft-image {\n  width: 300px;\n  height: 400px;\n  object-fit: cover;\n}\n\n.nft-info p {\n  text-align: center;\n}\n\n.nft-address,\n.nft-date {\n  font-style: italic;\n  font-size: 0.75rem;\n  display: block;\n}\n\n.nft-button-item {\n  text-align: center;\n}\n\n.link-style {\n  cursor: pointer;\n  color: blue;\n  text-decoration: underline;\n}\n\n.link-style:hover {\n  color: darkblue;\n}\n</style>\n",
      "start": 1720085720563,
      "end": 1720085724561,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720085724561,
      "end": 1720085724561,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import _sfc_main from \"/home/a/serious_game/albers/pages/albers/mint.vue?vue&type=script&setup=true&lang.ts\";\nexport * from \"/home/a/serious_game/albers/pages/albers/mint.vue?vue&type=script&setup=true&lang.ts\";\nimport \"/home/a/serious_game/albers/pages/albers/mint.vue?vue&type=style&index=0&scoped=70de816d&lang.css\";\nimport _export_sfc from \"\\0plugin-vue:export-helper\";\nexport default /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__scopeId\", \"data-v-70de816d\"]]);\n",
      "start": 1720085724561,
      "end": 1720085725361,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720085725361,
      "end": 1720085725361,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720085725361,
      "end": 1720085725362,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720085725362,
      "end": 1720085725362,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720085725362,
      "end": 1720085725362,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720085725367,
      "end": 1720085725367,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720085725368,
      "end": 1720085725368,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720085725368,
      "end": 1720085725368,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720085725368,
      "end": 1720085725368,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720085725369,
      "end": 1720085725369,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720085725369,
      "end": 1720085725370,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720085725370,
      "end": 1720085725370,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720085725370,
      "end": 1720085725370,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720085725370,
      "end": 1720085725370,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720085725370,
      "end": 1720085725370,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720085725370,
      "end": 1720085725370,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720085725371,
      "end": 1720085725371,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720085725371,
      "end": 1720085725374,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720085725374,
      "end": 1720085725375,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "result": "export { default } from \"/home/a/serious_game/albers/pages/albers/mint.vue?macro=true&vue&type=script&setup=true&lang.ts\"",
      "start": 1720085725375,
      "end": 1720085725377,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA"
      }
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720085725377,
      "end": 1720085725377,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720085725377,
      "end": 1720085725377,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720085725377,
      "end": 1720085725378,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720085725378,
      "end": 1720085725378,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720085725378,
      "end": 1720085725379,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720085725379,
      "end": 1720085725379,
      "order": "normal"
    }
  ]
}
