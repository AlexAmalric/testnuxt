{
  "resolvedId": "/home/a/serious_game/albers/pages/albers/[xrplAddress].vue?macro=true&vue&type=script&setup=true&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode } from \"vue\"\n\nconst _hoisted_1 = { key: 0 }\nconst _hoisted_2 = {\n  key: 1,\n  class: \"text-center\"\n}\nconst _hoisted_3 = {\n  key: 0,\n  class: \"text-center font-title text-lg\"\n}\nconst _hoisted_4 = { class: \"inline-block\" }\n\nimport { ref, computed, onMounted, inject } from \"vue\"\nimport { useRoute } from 'vue-router'\n/* @ts-ignore */\nimport API from '~/server/client'\n\n/* @ts-ignore */\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: '[xrplAddress]',\n  setup(__props) {\n\ndefinePageMeta({\n  layout: 'fullscreen'\n})\n\n\nconst { params } = useRoute()\nconst xrplAddress = computed(() => params.xrplAddress || 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh')\nconst network: any = inject('network')\n\n// authentication\nconst magSecret = inject('magSecret')\n\nconst nft: any = ref(null)\n\nonMounted(async () => {\n  const nfts = await API.getNFTs({ xrplAddress: xrplAddress.value, network: network.value })\n  if (nfts && nfts.length > 0) {\n    nft.value = nfts[0]\n  }\n})\n\nconst twitterUrl = ref('')\n\nconst onImageLoaded = ({ url }) => {\n  console.log('onImageLoaded', url)\n  twitterUrl.value = url\n}\n\n/* @ts-ignore */\nuseHead({\n  title: 'Community Mag Quest',\n  meta: [\n    { name: 'description', content: 'A unique Albers inspired generative art NFT based on your xrpl address.' },\n    { name: 'twitter:card', content: 'summary_large_image' },\n    { name: 'twitter:site', content: '@xrpl_commons' },\n    { name: 'twitter:title', content: 'Community Mag Quest' },\n    { name: 'twitter:description', content: 'A unique Albers inspired generative art NFT based on your xrpl address.' },\n    { name: 'twitter:creator', content: '@xrpl_commons' },\n    { name: 'twitter:image', content: `${twitterUrl.value}` },\n    { name: 'twitter:domain', content: 'xrpl-commons.org' }\n  ]\n})\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_albers = _resolveComponent(\"albers\")!\n\n  return (!_unref(magSecret))\n    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"This page requires the mag secret.\"))\n    : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n        (nft.value?.rank)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Rank #\" + _toDisplayString(nft.value?.rank), 1))\n          : _createCommentVNode(\"\", true),\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createVNode(_component_albers, {\n            \"xrpl-address\": xrplAddress.value,\n            onLoaded: onImageLoaded\n          }, null, 8, [\"xrpl-address\"])\n        ])\n      ]))\n}\n}\n\n})",
      "start": 1720085725575,
      "end": 1720085725576
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720085725576,
      "end": 1720085725576,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720085725576,
      "end": 1720085725576,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720085725576,
      "end": 1720085725576,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720085725576,
      "end": 1720085725576,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = { key: 0 };\nconst _hoisted_2 = {\n  key: 1,\n  class: \"text-center\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"text-center font-title text-lg\"\n};\nconst _hoisted_4 = { class: \"inline-block\" };\nimport { ref, computed, onMounted, inject } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport API from \"~/server/client\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"[xrplAddress]\",\n  setup(__props) {\n    definePageMeta({\n      layout: \"fullscreen\"\n    });\n    const { params } = useRoute();\n    const xrplAddress = computed(() => params.xrplAddress || \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\");\n    const network = inject(\"network\");\n    const magSecret = inject(\"magSecret\");\n    const nft = ref(null);\n    onMounted(async () => {\n      const nfts = await API.getNFTs({ xrplAddress: xrplAddress.value, network: network.value });\n      if (nfts && nfts.length > 0) {\n        nft.value = nfts[0];\n      }\n    });\n    const twitterUrl = ref(\"\");\n    const onImageLoaded = ({ url }) => {\n      console.log(\"onImageLoaded\", url);\n      twitterUrl.value = url;\n    };\n    useHead({\n      title: \"Community Mag Quest\",\n      meta: [\n        { name: \"description\", content: \"A unique Albers inspired generative art NFT based on your xrpl address.\" },\n        { name: \"twitter:card\", content: \"summary_large_image\" },\n        { name: \"twitter:site\", content: \"@xrpl_commons\" },\n        { name: \"twitter:title\", content: \"Community Mag Quest\" },\n        { name: \"twitter:description\", content: \"A unique Albers inspired generative art NFT based on your xrpl address.\" },\n        { name: \"twitter:creator\", content: \"@xrpl_commons\" },\n        { name: \"twitter:image\", content: `${twitterUrl.value}` },\n        { name: \"twitter:domain\", content: \"xrpl-commons.org\" }\n      ]\n    });\n    return (_ctx, _cache) => {\n      const _component_albers = _resolveComponent(\"albers\");\n      return !_unref(magSecret) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"This page requires the mag secret.\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n        nft.value?.rank ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Rank #\" + _toDisplayString(nft.value?.rank), 1)) : _createCommentVNode(\"\", true),\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createVNode(_component_albers, {\n            \"xrpl-address\": xrplAddress.value,\n            onLoaded: onImageLoaded\n          }, null, 8, [\"xrpl-address\"])\n        ])\n      ]));\n    };\n  }\n});\n",
      "start": 1720085725576,
      "end": 1720085726053,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/a/serious_game/albers/pages/albers/[xrplAddress].vue?macro=true&vue&type=script&setup=true&lang.ts"
        ],
        "sourcesContent": [
          "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode } from \"vue\"\n\nconst _hoisted_1 = { key: 0 }\nconst _hoisted_2 = {\n  key: 1,\n  class: \"text-center\"\n}\nconst _hoisted_3 = {\n  key: 0,\n  class: \"text-center font-title text-lg\"\n}\nconst _hoisted_4 = { class: \"inline-block\" }\n\nimport { ref, computed, onMounted, inject } from \"vue\"\nimport { useRoute } from 'vue-router'\n/* @ts-ignore */\nimport API from '~/server/client'\n\n/* @ts-ignore */\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: '[xrplAddress]',\n  setup(__props) {\n\ndefinePageMeta({\n  layout: 'fullscreen'\n})\n\n\nconst { params } = useRoute()\nconst xrplAddress = computed(() => params.xrplAddress || 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh')\nconst network: any = inject('network')\n\n// authentication\nconst magSecret = inject('magSecret')\n\nconst nft: any = ref(null)\n\nonMounted(async () => {\n  const nfts = await API.getNFTs({ xrplAddress: xrplAddress.value, network: network.value })\n  if (nfts && nfts.length > 0) {\n    nft.value = nfts[0]\n  }\n})\n\nconst twitterUrl = ref('')\n\nconst onImageLoaded = ({ url }) => {\n  console.log('onImageLoaded', url)\n  twitterUrl.value = url\n}\n\n/* @ts-ignore */\nuseHead({\n  title: 'Community Mag Quest',\n  meta: [\n    { name: 'description', content: 'A unique Albers inspired generative art NFT based on your xrpl address.' },\n    { name: 'twitter:card', content: 'summary_large_image' },\n    { name: 'twitter:site', content: '@xrpl_commons' },\n    { name: 'twitter:title', content: 'Community Mag Quest' },\n    { name: 'twitter:description', content: 'A unique Albers inspired generative art NFT based on your xrpl address.' },\n    { name: 'twitter:creator', content: '@xrpl_commons' },\n    { name: 'twitter:image', content: `${twitterUrl.value}` },\n    { name: 'twitter:domain', content: 'xrpl-commons.org' }\n  ]\n})\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_albers = _resolveComponent(\"albers\")!\n\n  return (!_unref(magSecret))\n    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"This page requires the mag secret.\"))\n    : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n        (nft.value?.rank)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Rank #\" + _toDisplayString(nft.value?.rank), 1))\n          : _createCommentVNode(\"\", true),\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createVNode(_component_albers, {\n            \"xrpl-address\": xrplAddress.value,\n            onLoaded: onImageLoaded\n          }, null, 8, [\"xrpl-address\"])\n        ])\n      ]))\n}\n}\n\n})"
        ],
        "mappings": "AAAA,SAAS,mBAAmB,wBAAwB;AACpD,SAAS,SAAS,QAAQ,aAAa,YAAY,sBAAsB,qBAAqB,sBAAsB,qBAAqB,mBAAmB,kBAAkB,oBAAoB,mBAAmB,eAAe,cAAc,sBAAsB,2BAA2B;AAEnS,MAAM,aAAa,EAAE,KAAK,EAAE;AAC5B,MAAM,aAAa;AAAA,EACjB,KAAK;AAAA,EACL,OAAO;AACT;AACA,MAAM,aAAa;AAAA,EACjB,KAAK;AAAA,EACL,OAAO;AACT;AACA,MAAM,aAAa,EAAE,OAAO,eAAe;AAE3C,SAAS,KAAK,UAAU,WAAW,cAAc;AACjD,SAAS,gBAAgB;AAEzB,OAAO,SAAS;AAIhB,eAA4B,iCAAiB;AAAA,EAC3C,QAAQ;AAAA,EACR,MAAM,SAAS;AAEjB,mBAAe;AAAA,MACb,QAAQ;AAAA,IACV,CAAC;AAGD,UAAM,EAAE,OAAO,IAAI,SAAS;AAC5B,UAAM,cAAc,SAAS,MAAM,OAAO,eAAe,oCAAoC;AAC7F,UAAM,UAAe,OAAO,SAAS;AAGrC,UAAM,YAAY,OAAO,WAAW;AAEpC,UAAM,MAAW,IAAI,IAAI;AAEzB,cAAU,YAAY;AACpB,YAAM,OAAO,MAAM,IAAI,QAAQ,EAAE,aAAa,YAAY,OAAO,SAAS,QAAQ,MAAM,CAAC;AACzF,UAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,YAAI,QAAQ,KAAK,CAAC;AAAA,MACpB;AAAA,IACF,CAAC;AAED,UAAM,aAAa,IAAI,EAAE;AAEzB,UAAM,gBAAgB,CAAC,EAAE,IAAI,MAAM;AACjC,cAAQ,IAAI,iBAAiB,GAAG;AAChC,iBAAW,QAAQ;AAAA,IACrB;AAGA,YAAQ;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,QACJ,EAAE,MAAM,eAAe,SAAS,0EAA0E;AAAA,QAC1G,EAAE,MAAM,gBAAgB,SAAS,sBAAsB;AAAA,QACvD,EAAE,MAAM,gBAAgB,SAAS,gBAAgB;AAAA,QACjD,EAAE,MAAM,iBAAiB,SAAS,sBAAsB;AAAA,QACxD,EAAE,MAAM,uBAAuB,SAAS,0EAA0E;AAAA,QAClH,EAAE,MAAM,mBAAmB,SAAS,gBAAgB;AAAA,QACpD,EAAE,MAAM,iBAAiB,SAAS,GAAG,WAAW,KAAK,GAAG;AAAA,QACxD,EAAE,MAAM,kBAAkB,SAAS,mBAAmB;AAAA,MACxD;AAAA,IACF,CAAC;AAGD,WAAO,CAAC,MAAU,WAAgB;AAChC,YAAM,oBAAoB,kBAAkB,QAAQ;AAEpD,aAAQ,CAAC,OAAO,SAAS,KACpB,WAAW,GAAG,oBAAoB,OAAO,YAAY,oCAAoC,MACzF,WAAW,GAAG,oBAAoB,OAAO,YAAY;AAAA,QACnD,IAAI,OAAO,QACP,WAAW,GAAG,oBAAoB,OAAO,YAAY,WAAW,iBAAiB,IAAI,OAAO,IAAI,GAAG,CAAC,KACrG,oBAAoB,IAAI,IAAI;AAAA,QAChC,oBAAoB,OAAO,YAAY;AAAA,UACrC,aAAa,mBAAmB;AAAA,YAC9B,gBAAgB,YAAY;AAAA,YAC5B,UAAU;AAAA,UACZ,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC;AAAA,QAC9B,CAAC;AAAA,MACH,CAAC;AAAA,IACP;AAAA,EACA;AAEA,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1720085726053,
      "end": 1720085726053,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720085726053,
      "end": 1720085726053,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720085726053,
      "end": 1720085726053,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720085726053,
      "end": 1720085726053,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720085726053,
      "end": 1720085726054,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720085726054,
      "end": 1720085726054,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720085726054,
      "end": 1720085726054,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720085726054,
      "end": 1720085726056,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720085726058,
      "end": 1720085726058,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720085726062,
      "end": 1720085726062,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720085726062,
      "end": 1720085726063,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { definePageMeta } from '/home/a/serious_game/albers/node_modules/nuxt/dist/pages/runtime/composables';\nimport { useHead } from '@unhead/vue';\nimport { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = { key: 0 };\nconst _hoisted_2 = {\n  key: 1,\n  class: \"text-center\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"text-center font-title text-lg\"\n};\nconst _hoisted_4 = { class: \"inline-block\" };\nimport { ref, computed, onMounted, inject } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport API from \"~/server/client\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"[xrplAddress]\",\n  setup(__props) {\n    definePageMeta({\n      layout: \"fullscreen\"\n    });\n    const { params } = useRoute();\n    const xrplAddress = computed(() => params.xrplAddress || \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\");\n    const network = inject(\"network\");\n    const magSecret = inject(\"magSecret\");\n    const nft = ref(null);\n    onMounted(async () => {\n      const nfts = await API.getNFTs({ xrplAddress: xrplAddress.value, network: network.value });\n      if (nfts && nfts.length > 0) {\n        nft.value = nfts[0];\n      }\n    });\n    const twitterUrl = ref(\"\");\n    const onImageLoaded = ({ url }) => {\n      console.log(\"onImageLoaded\", url);\n      twitterUrl.value = url;\n    };\n    useHead({\n      title: \"Community Mag Quest\",\n      meta: [\n        { name: \"description\", content: \"A unique Albers inspired generative art NFT based on your xrpl address.\" },\n        { name: \"twitter:card\", content: \"summary_large_image\" },\n        { name: \"twitter:site\", content: \"@xrpl_commons\" },\n        { name: \"twitter:title\", content: \"Community Mag Quest\" },\n        { name: \"twitter:description\", content: \"A unique Albers inspired generative art NFT based on your xrpl address.\" },\n        { name: \"twitter:creator\", content: \"@xrpl_commons\" },\n        { name: \"twitter:image\", content: `${twitterUrl.value}` },\n        { name: \"twitter:domain\", content: \"xrpl-commons.org\" }\n      ]\n    });\n    return (_ctx, _cache) => {\n      const _component_albers = _resolveComponent(\"albers\");\n      return !_unref(magSecret) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"This page requires the mag secret.\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n        nft.value?.rank ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Rank #\" + _toDisplayString(nft.value?.rank), 1)) : _createCommentVNode(\"\", true),\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createVNode(_component_albers, {\n            \"xrpl-address\": xrplAddress.value,\n            onLoaded: onImageLoaded\n          }, null, 8, [\"xrpl-address\"])\n        ])\n      ]));\n    };\n  }\n});\n",
      "start": 1720085726063,
      "end": 1720085726070,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappingszS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClnG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtjG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACbpH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjlE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5H,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClxlK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1720085726076,
      "end": 1720085726078,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "result": "const __nuxt_page_meta = {\n      layout: \"fullscreen\"\n    }\nexport default __nuxt_page_meta",
      "start": 1720085726086,
      "end": 1720085726088,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA;AAAA;AAAA;AAAA"
      }
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720085726088,
      "end": 1720085726088,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720085726091,
      "end": 1720085726091,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720085726091,
      "end": 1720085726091,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720085726093,
      "end": 1720085726093,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720085726093,
      "end": 1720085726093,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720085726093,
      "end": 1720085726093,
      "order": "normal"
    }
  ]
}
