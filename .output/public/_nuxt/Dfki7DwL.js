const d=[{name:"checkSecret",path:"/api/secret",method:"POST"},{name:"createNFT",path:"/api/art/create",method:"POST",secretRequired:!0},{name:"getNFTs",path:"/api/art",method:"GET",secretRequired:!0},{name:"createOffer",path:"/api/art/createOffer",method:"POST",secretRequired:!0},{name:"claimNFT",path:"/api/art/claim",method:"POST",secretRequired:!0},{name:"redeemNFT",path:"/api/art/redeem",method:"POST",secretRequired:!0},{name:"listCollection",path:"/api/art",method:"GET",secretRequired:!0},{name:"XamanSignIn",path:"/api/xaman/sign-in",method:"GET",secretRequired:!0},{name:"XamanGetPayload",path:"/api/xaman/payload",method:"GET",secretRequired:!0},{name:"XamanGetAcceptNFTOffer",path:"/api/xaman/acceptNFTOffer",method:"GET",secretRequired:!0},{name:"createAlbersURL",path:"/api/art/image/create",method:"POST",secretRequired:!0},{name:"albersURLExists",path:"/api/art/image",method:"GET",secretRequired:!0}],h=()=>decodeURIComponent(document.cookie).split(";").reduce((e,r)=>{const[o,n]=r.split("=").map(a=>a.trim());return e[o]=decodeURIComponent(n),e},{}),p={};d.forEach(e=>{p[e.name]=async r=>{const o={"content-type":"application/json"},n=h(),a=n.secret;if(console.log("cookie",document.cookie,n,a),e.secretRequired){if(!a)throw new Error("secret is required");o["x-secret"]=a}let c=e.path,i,s="";e.method==="GET"&&r&&Object.keys(r).length?(s=Object.entries(r).map(([t,m])=>`${encodeURIComponent(t)}=${encodeURIComponent(`${m}`)}`).join("&"),c=`${c}?${s}`):e.method!=="GET"&&(i=JSON.stringify(r));try{const t=await fetch(c,{method:e.method,headers:o,...i?{body:i}:{}});if(!t.ok){const m=await t.json();throw new Error(m.message||"An error occurred with the request.")}return t.json()}catch(t){throw console.error(`Error with the ${e.name} action:`,t.message),t}}});export{p as a};
